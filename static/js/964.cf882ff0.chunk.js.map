{"version":3,"file":"static/js/964.cf882ff0.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.jsx","components/Error/Error.jsx","components/Filter/Filter.jsx","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["export const getError = state => state.contacts.error;\nexport const getIsLoading = state => state.contacts.isLoading;\nexport const getContacts = state => state.contacts.items;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { Notify } from 'notiflix';\nimport { getContacts } from 'redux/contacts/selectors';\nimport { addContsct } from 'redux/contacts/operations';\nimport { TextField, Button, Box, Typography, Paper } from '@mui/material';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\n\nconst ContactForm = () => {\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  const checkNewName = name => {\n    if (contacts) {\n      const normalizeDataName = name.toLowerCase();\n      const nameIsWritten = contacts.some(\n        contact => contact.name.toLowerCase() === normalizeDataName\n      );\n      return nameIsWritten;\n    } else {\n      return false;\n    }\n  };\n  return (\n    <>\n      <Paper\n        elevation={16}\n        sx={{\n          margin: '0 auto',\n          padding: '20px',\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          width: '490px',\n        }}\n      >\n        <Box sx={{ display: 'flex', flexDirection: 'column' }}>\n          <Typography>New contact</Typography>\n          <Formik\n            initialValues={{ name: '', number: '' }}\n            validate={values => {\n              const errors = {};\n              if (!values.name) {\n                errors.name = 'Name is required';\n              } else if (\n                !/^[a-zA-Zа-яА-Я]+([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*$/.test(\n                  values.name\n                )\n              ) {\n                errors.name =\n                  'Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore dArtagnan';\n              }\n              if (!values.number) {\n                errors.number = 'Number is required';\n              } else if (\n                !/\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}/.test(\n                  values.number\n                )\n              ) {\n                errors.number =\n                  'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +';\n              }\n              return errors;\n            }}\n            onSubmit={async ({ name, number }, { resetForm }) => {\n              if (!checkNewName(name)) {\n                const newContact = { name, number };\n                await dispatch(addContsct(newContact));\n              } else {\n                Notify.failure(`${name} is already in contacts.`);\n              }\n              document.activeElement.blur();\n              resetForm();\n            }}\n          >\n            <Form>\n              <Box sx={{ display: 'flex', flexDirection: 'column' }}>\n                <Field\n                  as={TextField}\n                  type=\"text\"\n                  name=\"name\"\n                  label=\"Name\"\n                  variant=\"filled\"\n                  sx={{ mb: 2, mt: 2 }}\n                  required\n                />\n                <ErrorMessage name=\"name\" component=\"div\" />\n\n                <Field\n                  as={TextField}\n                  type=\"tel\"\n                  name=\"number\"\n                  label=\"Number\"\n                  variant=\"filled\"\n                  sx={{ mb: 2, width: '450px' }}\n                  required\n                />\n                <ErrorMessage name=\"number\" component=\"div\" />\n\n                <Button type=\"submit\" variant=\"outlined\">\n                  Add contact\n                </Button>\n              </Box>\n            </Form>\n          </Formik>\n        </Box>\n      </Paper>\n    </>\n  );\n};\n\nexport default ContactForm;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { getFilter } from 'redux/filter/slice';\nimport { getContacts } from 'redux/contacts/selectors';\nimport { deleteContact } from 'redux/contacts/operations';\nimport IconButton from '@mui/material/IconButton';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport { Typography, List, ListItem } from '@mui/material';\n\nconst ContactList = () => {\n  const contacts = useSelector(getContacts);\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  const filteredContacts = () => {\n    const normalizedFilter = filter.toLowerCase();\n    if (contacts) {\n      return contacts.filter(contact =>\n        contact.name.toLowerCase().includes(normalizedFilter)\n      );\n    }\n    return [];\n  };\n\n  return filteredContacts().length > 0 ? (\n    <List\n      sx={{\n        padding: '20px',\n        backgroundColor: '#fff',\n        height: '350px',\n        overflow: 'auto',\n      }}\n    >\n      {filteredContacts().map(({ id, name, number }) => (\n        <ListItem\n          key={id}\n          sx={{\n            width: '600px',\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n            marginBottom: '8px',\n            border: '1px solid gray',\n            borderRadius: '3px',\n            padding: '5px',\n          }}\n        >\n          <Typography\n            sx={{\n              width: '200px',\n              overflow: 'hidden',\n            }}\n          >\n            {name}\n          </Typography>\n          <Typography\n            sx={{\n              width: '200px',\n              overflow: 'hidden',\n            }}\n          >\n            {number}\n          </Typography>\n          <IconButton\n            aria-label=\"delete\"\n            onClick={() => dispatch(deleteContact(id))}\n          >\n            <DeleteIcon sx={{ fill: 'none', stroke: '#3498db' }} />\n          </IconButton>\n        </ListItem>\n      ))}\n    </List>\n  ) : filter !== '' ? (\n    <Typography\n      sx={{\n        width: '350px',\n        textAlign: 'center',\n        padding: '20px',\n        backgroundColor: '#fff',\n        height: '350px',\n      }}\n    >\n      There are no saved contacts with this name.\n    </Typography>\n  ) : (\n    <Typography\n      sx={{\n        width: '350px',\n        textAlign: 'center',\n        padding: '20px',\n        backgroundColor: '#fff',\n        height: '350px',\n      }}\n    >\n      There are no contacts.\n    </Typography>\n  );\n};\n\nexport default ContactList;\n","import { useSelector } from 'react-redux';\nimport { getError } from 'redux/contacts/selectors';\nimport { Typography } from '@mui/material';\n\nconst Error = () => {\n  const error = useSelector(getError);\n  return (\n    <Typography\n      sx={{\n        width: '380px',\n        height: '300px',\n        backgroundColor: '#fff',\n        textAlign: 'center',\n        paddingTop: '20px',\n      }}\n    >\n      {error}\n    </Typography>\n  );\n};\n\nexport default Error;\n","import { useDispatch } from 'react-redux';\nimport { update } from 'redux/filter/slice';\nimport { InputLabel, OutlinedInput, InputAdornment } from '@mui/material';\nimport SearchIcon from '@mui/icons-material/Search';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n\n  const onChangeFilter = e => {\n    const filter = e.currentTarget.value.trim();\n    dispatch(update(filter));\n  };\n\n  return (\n    <>\n      <InputLabel htmlFor=\"outlined-adornment-amount\">\n        Find contacts by name\n      </InputLabel>\n      <OutlinedInput\n        sx={{\n          width: '600px',\n          backgroundColor: '#fff',\n          marginBottom: '15px',\n          marginTop: '10px',\n        }}\n        type=\"text\"\n        name=\"filter\"\n        onChange={onChangeFilter}\n        startAdornment={\n          <InputAdornment position=\"start\">\n            <SearchIcon />\n          </InputAdornment>\n        }\n        labelwidth={60}\n      />\n    </>\n  );\n};\nexport default Filter;\n","import ContactForm from 'components/ContactForm';\nimport ContactList from 'components/ContactList';\nimport Error from 'components/Error';\nimport Filter from 'components/Filter';\nimport Loader from 'components/Loader';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { getError, getIsLoading } from 'redux/contacts/selectors';\nimport { Paper } from '@mui/material';\n\nconst ContactsPage = () => {\n  const isLoading = useSelector(getIsLoading);\n  const error = useSelector(getError);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Paper\n        elevation={16}\n        sx={{\n          margin: '0 auto',\n          padding: '20px',\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'start',\n        }}\n      >\n        <ContactForm />\n        <Paper\n          elevation={16}\n          sx={{\n            margin: '0 auto',\n            padding: '20px',\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n        >\n          <Filter />\n          {isLoading ? <Loader /> : error ? <Error /> : <ContactList />}\n        </Paper>\n      </Paper>\n    </>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["getError","state","contacts","error","getIsLoading","isLoading","getContacts","items","useSelector","dispatch","useDispatch","checkNewName","name","normalizeDataName","toLowerCase","some","contact","Paper","elevation","sx","margin","padding","display","justifyContent","alignItems","width","Box","flexDirection","Typography","initialValues","number","validate","values","errors","test","onSubmit","resetForm","newContact","addContsct","Notify","document","activeElement","blur","as","TextField","type","label","variant","mb","mt","required","component","Button","filter","getFilter","filteredContacts","normalizedFilter","includes","length","List","backgroundColor","height","overflow","map","id","ListItem","marginBottom","border","borderRadius","IconButton","onClick","deleteContact","Delete","fill","stroke","textAlign","paddingTop","InputLabel","htmlFor","OutlinedInput","marginTop","onChange","e","currentTarget","value","trim","update","startAdornment","InputAdornment","position","Search","labelwidth","useEffect","fetchContacts","Loader"],"sourceRoot":""}