{"version":3,"file":"static/js/720.d35e9f2a.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.jsx","components/Error/Error.jsx","components/Filter/Filter.jsx","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["export const getError = state => state.contacts.error;\nexport const getIsLoading = state => state.contacts.isLoading;\nexport const getContacts = state => state.contacts.items;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { Notify } from 'notiflix';\nimport { getContacts } from 'redux/contacts/selectors';\nimport { addContsct } from 'redux/contacts/operations';\nimport { TextField, Button, Box, Typography, Paper } from '@mui/material';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\n\nconst ContactForm = () => {\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  const checkNewName = name => {\n    if (contacts) {\n      const normalizeDataName = name.toLowerCase();\n      const nameIsWritten = contacts.some(\n        contact => contact.name.toLowerCase() === normalizeDataName\n      );\n      return nameIsWritten;\n    } else {\n      return false;\n    }\n  };\n  return (\n    <>\n      <Paper\n        elevation={16}\n        sx={{\n          margin: '0',\n          padding: '20px',\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          width: '500px',\n        }}\n      >\n        <Box sx={{ display: 'flex', flexDirection: 'column' }}>\n          <Typography>New contact</Typography>\n          <Formik\n            initialValues={{ name: '', number: '' }}\n            validate={values => {\n              const errors = {};\n              if (!values.name) {\n                errors.name = 'Name is required';\n              } else if (\n                !/^[a-zA-Zа-яА-Я]+([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*$/.test(\n                  values.name\n                )\n              ) {\n                errors.name =\n                  'Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore dArtagnan';\n              }\n              if (!values.number) {\n                errors.number = 'Number is required';\n              } else if (\n                !/\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}/.test(\n                  values.number\n                )\n              ) {\n                errors.number =\n                  'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +';\n              }\n              return errors;\n            }}\n            onSubmit={async ({ name, number }, { resetForm }) => {\n              if (!checkNewName(name)) {\n                const newContact = { name, number };\n                await dispatch(addContsct(newContact));\n              } else {\n                Notify.failure(`${name} is already in contacts.`);\n              }\n              document.activeElement.blur();\n              resetForm();\n            }}\n          >\n            <Form>\n              <Box sx={{ display: 'flex', flexDirection: 'column' }}>\n                <Field\n                  as={TextField}\n                  type=\"text\"\n                  name=\"name\"\n                  label=\"Name\"\n                  variant=\"filled\"\n                  sx={{ mb: 2, mt: 2 }}\n                  required\n                />\n                <ErrorMessage name=\"name\" component=\"div\" />\n\n                <Field\n                  as={TextField}\n                  type=\"tel\"\n                  name=\"number\"\n                  label=\"Number\"\n                  variant=\"filled\"\n                  sx={{ mb: 2, width: '450px' }}\n                  required\n                />\n                <ErrorMessage name=\"number\" component=\"div\" />\n\n                <Button type=\"submit\" variant=\"outlined\">\n                  Add contact\n                </Button>\n              </Box>\n            </Form>\n          </Formik>\n        </Box>\n      </Paper>\n    </>\n  );\n};\n\nexport default ContactForm;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { getFilter } from 'redux/filter/slice';\nimport { getContacts } from 'redux/contacts/selectors';\nimport { deleteContact } from 'redux/contacts/operations';\nimport IconButton from '@mui/material/IconButton';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport { Typography, List, ListItem } from '@mui/material';\n\nconst ContactList = () => {\n  const contacts = useSelector(getContacts);\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  const filteredContacts = () => {\n    const normalizedFilter = filter.toLowerCase();\n    if (contacts) {\n      return contacts.filter(contact =>\n        contact.name.toLowerCase().includes(normalizedFilter)\n      );\n    }\n    return [];\n  };\n\n  return filteredContacts().length > 0 ? (\n    <List\n      sx={{\n        padding: '20px',\n        backgroundColor: '#fff',\n        height: '350px',\n        overflow: 'auto',\n      }}\n    >\n      {filteredContacts().map(({ id, name, number }) => (\n        <ListItem\n          key={id}\n          sx={{\n            width: '600px',\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n            marginBottom: '8px',\n            border: '1px solid gray',\n            borderRadius: '3px',\n            padding: '5px',\n          }}\n        >\n          <Typography\n            sx={{\n              width: '200px',\n              overflow: 'hidden',\n            }}\n          >\n            {name}\n          </Typography>\n          <Typography\n            sx={{\n              width: '200px',\n              overflow: 'hidden',\n            }}\n          >\n            {number}\n          </Typography>\n          <IconButton\n            aria-label=\"delete\"\n            onClick={() => dispatch(deleteContact(id))}\n          >\n            <DeleteIcon sx={{ fill: 'none', stroke: '#3498db' }} />\n          </IconButton>\n        </ListItem>\n      ))}\n    </List>\n  ) : filter !== '' ? (\n    <Typography\n      sx={{\n        width: '350px',\n        textAlign: 'center',\n        padding: '20px',\n        backgroundColor: '#fff',\n        height: '350px',\n      }}\n    >\n      There are no saved contacts with this name.\n    </Typography>\n  ) : (\n    <Typography\n      sx={{\n        width: '350px',\n        textAlign: 'center',\n        padding: '20px',\n        backgroundColor: '#fff',\n        height: '350px',\n      }}\n    >\n      There are no contacts.\n    </Typography>\n  );\n};\n\nexport default ContactList;\n","import { useSelector } from 'react-redux';\nimport { getError } from 'redux/contacts/selectors';\nimport { Typography } from '@mui/material';\n\nconst Error = () => {\n  const error = useSelector(getError);\n  return (\n    <Typography\n      sx={{\n        width: '380px',\n        height: '300px',\n        backgroundColor: '#fff',\n        textAlign: 'center',\n        paddingTop: '20px',\n      }}\n    >\n      {error}\n    </Typography>\n  );\n};\n\nexport default Error;\n","import { useDispatch } from 'react-redux';\nimport { update } from 'redux/filter/slice';\nimport { InputLabel, OutlinedInput, InputAdornment } from '@mui/material';\nimport SearchIcon from '@mui/icons-material/Search';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n\n  const onChangeFilter = e => {\n    const filter = e.currentTarget.value.trim();\n    dispatch(update(filter));\n  };\n\n  return (\n    <>\n      <InputLabel htmlFor=\"outlined-adornment-amount\">\n        Find contacts by name\n      </InputLabel>\n      <OutlinedInput\n        sx={{\n          width: '500px',\n          backgroundColor: '#fff',\n          marginBottom: '15px',\n          marginTop: '10px',\n        }}\n        type=\"text\"\n        name=\"filter\"\n        onChange={onChangeFilter}\n        startAdornment={\n          <InputAdornment position=\"start\">\n            <SearchIcon />\n          </InputAdornment>\n        }\n        labelwidth={60}\n      />\n    </>\n  );\n};\nexport default Filter;\n","import ContactForm from 'components/ContactForm';\nimport ContactList from 'components/ContactList';\nimport Error from 'components/Error';\nimport Filter from 'components/Filter';\nimport Loader from 'components/Loader';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { getError, getIsLoading } from 'redux/contacts/selectors';\nimport { Paper } from '@mui/material';\n\nconst ContactsPage = () => {\n  const isLoading = useSelector(getIsLoading);\n  const error = useSelector(getError);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Paper\n      elevation={16}\n      sx={{\n        padding: '20px',\n        display: 'flex',\n        gap: '20px',\n        justifyContent: 'center',\n        alignItems: 'start',\n      }}\n    >\n      <ContactForm />\n      <Paper\n        elevation={16}\n        sx={{\n          margin: '0',\n          padding: '20px',\n          display: 'flex',\n          flexDirection: 'column',\n          justifyContent: 'center',\n          alignItems: 'center',\n        }}\n      >\n        <Filter />\n        {isLoading ? <Loader /> : error ? <Error /> : <ContactList />}\n      </Paper>\n    </Paper>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["getError","state","contacts","error","getIsLoading","isLoading","getContacts","items","ContactForm","useSelector","dispatch","useDispatch","_jsx","_Fragment","children","Paper","elevation","sx","margin","padding","display","justifyContent","alignItems","width","_jsxs","Box","flexDirection","Typography","Formik","initialValues","name","number","validate","values","errors","test","onSubmit","async","_ref","_ref2","resetForm","normalizeDataName","toLowerCase","some","contact","checkNewName","Notify","failure","concat","newContact","addContsct","document","activeElement","blur","Form","Field","as","TextField","type","label","variant","mb","mt","required","ErrorMessage","component","Button","ContactList","filter","getFilter","filteredContacts","normalizedFilter","includes","length","List","backgroundColor","height","overflow","map","id","ListItem","marginBottom","border","borderRadius","IconButton","onClick","deleteContact","DeleteIcon","fill","stroke","textAlign","Error","paddingTop","Filter","InputLabel","htmlFor","OutlinedInput","marginTop","onChange","e","currentTarget","value","trim","update","startAdornment","InputAdornment","position","SearchIcon","labelwidth","ContactsPage","useEffect","fetchContacts","gap","Loader"],"sourceRoot":""}